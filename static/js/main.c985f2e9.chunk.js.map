{"version":3,"sources":["components/animation.js","utils/interact.js","components/mint.js","components/faq.js","App.js","reportWebVitals.js","index.js"],"names":["Animation","className","id","src","alt","connectWallet","a","window","ethereum","request","method","addressArray","obj","address","alert","message","getCurrentWalletConnected","length","contractABI","require","contract","createAlchemyWeb3","process","eth","Contract","mintNFT","amount","price","success","status","methods","mint","send","from","gasPrice","gas","value","on","error","receipt","console","log","Mint","useState","walletAddress","setWallet","show","setShow","tokenNumber","setTokenNumber","setStatus","supply","setSupply","handleClose","handleShow","onMintPressed","addWalletListener","accounts","useEffect","totalSupply","call","then","_supply","catch","err","fetchData","connectWalletPressed","walletResponse","width","height","Button","onClick","String","substring","Modal","onHide","Header","closeButton","Title","Body","style","maxWidth","type","aria-hidden","Form","Label","Footer","variant","FAQ","Accordion","Item","eventKey","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c985f2e9.chunk.js","sourcesContent":["\nimport React from \"react\";\n\n\nconst Animation = () => {\n  return (\n    <div>\n      <div className=\"gallery-img image-center\">\n       \n      </div>\n      <div className=\"animation-header purple-text text-center\" id=\"animation\">\n\n        <img src=\"./images/svg.svg\" alt=\"\" />\n      </div>\n      \n    \n\n   \n    </div>\n    \n  );  \n};\n\nexport default Animation;","export const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const obj = {          \n          address: addressArray[0],\n        };\n        return obj;\n      } catch (err) {\n        alert(err.message);\n        return {        \n          address: \"\",                \n        };\n      }\n    } else {\n      alert(\"Metamask is not installed!\");\n      return {\n        address: \"\",        \n      };\n    }\n  };\n  \n  export const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],            \n          };\n        } else {\n          return {\n            address: \"\",            \n          };\n        }\n      } catch (err) {\n        return {\n          address: \"\",          \n        };\n      }\n    } else {\n      return {\n        address: \"\",        \n      };\n    }\n  };\n  \n  ","import React, { useState, useEffect } from \"react\";\nimport {Button} from \"react-bootstrap\";\nimport { connectWallet, getCurrentWalletConnected } from \"../utils/interact.js\";\n\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\n\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0x7340E290f9bE98E879200E53DA75469Eb2F5CA42\";\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\nconst contract = new web3.eth.Contract(contractABI, contractAddress);  \n\nconst mintNFT = async(amount, price) => {  \n  const {address} = await getCurrentWalletConnected();\n  if (address === \"\") {\n    return {\n      success: false, \n      status: \"❗Please make sure wallet connected.\",           \n    }\n  }  \n  else {      \n    contract.methods.mint(amount).send({from: address, gasPrice: 80000000000, gas: 380000*amount, value: (amount * price)})\n    .on(\"confirmation\", function () {      \n    })\n    .on('error', async function (error, receipt) {\n      console.log(error);      \n    }); \n\n    return {\n      status: \"\",\n    }   \n    \n  }\n}    \n\nconst Mint = () => {\n  const [walletAddress, setWallet] = useState(\"\");  \n  const [show, setShow] = useState(false);\n  const [tokenNumber, setTokenNumber] = useState(1);\n  const [status, setStatus] = useState(\"\"); \n  const publicsale = true;\n  const [supply, setSupply] = useState(0);\n\n  const handleClose = () => setShow(false);  \n  const publicsale_price = 80000000000000000;\n\n  const handleShow = async () => {  \n    setShow(true);   \n  };\n\n  const onMintHandle = () => {       \n    setStatus(\"Mint not allowed!\");\n  };\n\n  const decreaseTokenNumber = () => {\n    if (tokenNumber === 1) {\n      return;\n    }\n    setTokenNumber(tokenNumber - 1);\n  }\n\n  const onMintPressed = async () => {          \n    const { status } = await mintNFT(tokenNumber, publicsale_price); \n      setStatus(status);         \n  };\n\n  useEffect(() => {    \n    async function fetchData() {\n      const {address} = await getCurrentWalletConnected();      \n      contract.methods.totalSupply().call().then((_supply) => {        \n        setSupply(_supply);\n      }).catch((err) => console.log(err))\n      setWallet(address);    \n      addWalletListener(); \n    }\n    fetchData();\n  }, []);\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);          \n        } else {\n          setWallet(\"\");          \n        }\n      });\n    } else {\n         \n    }\n  } \n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();    \n    setWallet(walletResponse.address);\n  };\n\n  return (\n    <div className=\"mint-container purple-text\">\n      <div className=\"mint-header text-center\" id=\"mint\">\n        Mint\n      </div>\n      <div className=\"mint-panel\">\n        <div className=\"mint-header text-center\">\n         ELE FANS NFT\n        </div>\n        <div className=\"mint-narration\">\n          Get you own crazy, funky, alien, amazing Token here. \n          They are here to make people panic after the pandemic and have a fun time within the community. \n          Our main goal is to find each of these ELE Token a owner where they will battle it out between who is the most valueable out of all of them.\n        </div>\n        <div className=\"collage\">\n          <img src=\"./images/example.gif\" alt=\"\" width=\"150\" height=\"150\"/>\n        </div>\n        <div className=\"mint-price\">\n          Max per Tx 20<br />\n          Only 0.09 Eth Each\n        </div>\n        <div className=\"text-center\">\n          <Button className=\"connect-btn mt-3\" onClick={connectWalletPressed}>\n            {walletAddress.length > 0 ? (                    \n              \"\" +\n              String(walletAddress).substring(0, 6) +\n              \"...\" +\n              String(walletAddress).substring(38)\n              ) : (\n                <span>Connect</span>\n              )\n            } \n          </Button>\n        </div>\n        <div className=\"mint-status text-center\">\n          {supply} / 10000 Sold Out \n        </div>\n        <div className=\"text-center\">\n          <Button className=\"mint-btn mb-3 mb-md-5\" onClick={handleShow}>\n            Mint\n          </Button>\n        </div>\n      </div>  \n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Mint Some ELE </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <img src=\"./images/example.gif\" alt=\"\" style={{maxWidth: \"220px\"}}/>\n          <div className=\"mint-number\">\n            <button type=\"button\" onClick={decreaseTokenNumber}><span aria-hidden=\"true\">-</span></button>\n            <Form>\n              <Form.Label>\n                { tokenNumber }\n              </Form.Label>                  \n              {status ? <div>{status}</div> \n                : <div></div>}\n            </Form>\n            {(tokenNumber < 20) ? <button type=\"button\" onClick={() => setTokenNumber(tokenNumber + 1)}><span aria-hidden=\"true\">+</span></button> \n              : <button type=\"button\" onClick={() => setTokenNumber(tokenNumber)}><span aria-hidden=\"true\">+</span></button>\n            }\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          {(!publicsale) ? <Button variant=\"primary\" onClick={onMintHandle}>Mint</Button> \n            : <Button variant=\"primary\" onClick={onMintPressed}>Mint</Button>\n          }              \n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\nexport default Mint;","import React from \"react\";\nimport {Accordion} from \"react-bootstrap\";\n\nconst FAQ = () => {\n  return (\n    <div className=\"faq-container purple-text\">\n      <div className=\"faq-header text-center\" id=\"faq\">\n        FAQ\n      </div>\n      <div className=\"faq-text px-2 px-md-4\">\n      </div>\n      <Accordion>\n        <Accordion.Item eventKey=\"0\">\n          <Accordion.Header>Q:How much does minting an NFT and the Nanopasses cost?</Accordion.Header>\n          <Accordion.Body>\n          The ELE FANS NFTs will cost 0.09ETH each. The Nano passes for the other competitions will always cost 0.02ETH per pass.\n          </Accordion.Body>\n        </Accordion.Item>\n        <Accordion.Item eventKey=\"1\">\n          <Accordion.Header>Q:How many ELE FANS NFTs do I need to hold to buy 5 Nano passes?</Accordion.Header>\n          <Accordion.Body>\n          The ELE FANS NFT will be your subscription to all competitions, Each NFT will whitelist you for the Nano Passes.\n           To buy 5 nano passes you will need to hold 5 ELE FANS NFTs.\n          </Accordion.Body>\n        </Accordion.Item>\n        <Accordion.Item eventKey=\"2\">\n          <Accordion.Header>Q:Following the prizes, charity donation and adding to the community fund, What happens to the rest of the funds?</Accordion.Header>\n          <Accordion.Body>\n          The funds will go towards salaries, partnerships and marketing. All aspects of the project that needs funding will be funded from that. The Community funds will be used strictly for the community giveaways nothing else and the charity funds will be used strictly for charities.\n          </Accordion.Body>\n        </Accordion.Item>\n        <Accordion.Item eventKey=\"3\">\n          <Accordion.Header>Q:How many NFTS can one buy on launch?</Accordion.Header>\n          <Accordion.Body>\n          There is no limit to how many NFTs can be bought per wallet. There will be a transaction limit of 10 NFTs per transaction.\n          </Accordion.Body>\n        </Accordion.Item>\n        <Accordion.Item eventKey=\"4\">\n          <Accordion.Header>Q:How can i mint the NFTs and the Nano passes?</Accordion.Header>\n          <Accordion.Body>\n          The minting of the ELE FANS\n           NFT and all the nano passes will happen here on our website.\n          </Accordion.Body>\n        </Accordion.Item>\n        <Accordion.Item eventKey=\"5\">\n          <Accordion.Header>Q:What is the supply amounts of the Nano passes?</Accordion.Header>\n          <Accordion.Body>\n          The nano passes supply changes per competition. See the Roadmap for details on the competitions and the supply for each competition.\n          </Accordion.Body>\n        </Accordion.Item>\n        <Accordion.Item eventKey=\"6\">\n          <Accordion.Header>Q:Are there benefits to holding multiple ELE FANS NFTs?</Accordion.Header>\n          <Accordion.Body>\n          There is a few benefits. <br/>\n\n1- ELE FANS NFTs are limited to 10,000 supply, 100 NFTS will be given back to the community throughout the first year.\n\n<br/>2- ELE FANS NFTs will have Rarity traits and will be of different value\n\n<br/> 3- ELE FANS NFT will be your lifetime subscription to enter all competitions and giveaways for the community.\n\n<br/> 4- ELE FAN NFT is your entry to the first competition which up to two winners will WIN a Tesla Model 3.\n          </Accordion.Body>\n        </Accordion.Item>\n        <Accordion.Item eventKey=\"7\">\n          <Accordion.Header>Q:How and where will the competitions be drawn?</Accordion.Header>\n          <Accordion.Body>\n          All our competitions will be drawn LIVE on our YouTube channel. Make sure you subscribe to get all the notifications.\n         <br/>All the draws will be done using random.org on live stream.\n          </Accordion.Body>\n        </Accordion.Item>\n        <Accordion.Item eventKey=\"8\">\n          <Accordion.Header>Q:How will the live draw work?</Accordion.Header>\n          <Accordion.Body>\n          The live draw will be done on random.org.<br/>\n\nThe process is:<br/>\n\n1- we will state the LIVE TIME in GMT format to ensure that we are live and it's not recorded.\n\n<br/>2- We will open random.org on a browser which is in 'private browsing mode' to ensure no cache data is in play.\n\n<br/>3- We will draw a minimum of 5 numbers drawn to ensure that the software is random. it will be in a range of numbers that is not included in the actual draw.\n\n<br/>4- we will then setup the draw numbers and pick the winners.\n\n4.1- If the draw is crowning multiple winners we will use the same draw.\n          </Accordion.Body>\n        </Accordion.Item>\n        <Accordion.Item eventKey=\"9\">\n          <Accordion.Header>Q:How will you know you are rewarding the prizes to the right winners?</Accordion.Header>\n          <Accordion.Body>\n          All winners of the competitions will need to be verified by ID to ensure we are rewarding the rightful winners.\n          </Accordion.Body>\n        </Accordion.Item>\n        <Accordion.Item eventKey=\"10\">\n          <Accordion.Header>Q:The giveaways are the same as the competitions?</Accordion.Header>\n          <Accordion.Body>\n          The giveaways are not the same as the competitions, the competitions require nanopasses and will be minted from our website. <br/> The giveaways are done randomly on our discord, the prizes are ELE FANS NFT, ETH, BTC and many more. They are available for our community even if you are not an ELE FANS NFT holder.\n          </Accordion.Body>\n        </Accordion.Item>\n      </Accordion>\n    </div>\n  );\n};\n\nexport default FAQ;","import { Fragment } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import Navigation from './components/nabvar';\n//import Banner from './components/banner';\nimport Animation from './components/animation';\nimport Mint from './components/mint';\n//import Roadmap from './components/roadmap';\nimport FAQ from './components/faq';\n//import Gallery from './components/gallery';\n//import Header from './components/Header';\n\nimport './styles/navbar.css';\nimport './styles/main.css';\nimport './styles/fontawesome.min.css'\n\nfunction App() {\n  return (\n    <Fragment>\n     \n       <Animation />\n    \n    \n      <Mint />\n   \n      <FAQ />\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}